// Copyright (c) 2014-2015 Wolfgang Borgsm√ºller
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
// 1. Redistributions of source code must retain the above copyright 
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
//    notice, this list of conditions and the following disclaimer in the 
//    documentation and/or other materials provided with the distribution.
// 
// 3. Neither the name of the copyright holder nor the names of its 
//    contributors may be used to endorse or promote products derived 
//    from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
// OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
// TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Generated file. Do not edit.


using System;

namespace Chromium {
    /// <summary>
    /// Structure representing keyboard event information.
    /// </summary>
    public sealed class CfxKeyEvent : CfxStructure {

        internal static CfxKeyEvent Wrap(IntPtr nativePtr) {
            if(nativePtr == IntPtr.Zero) return null;
            return new CfxKeyEvent(nativePtr);
        }

        internal static CfxKeyEvent WrapOwned(IntPtr nativePtr) {
            if(nativePtr == IntPtr.Zero) return null;
            return new CfxKeyEvent(nativePtr, true);
        }

        private CfxKeyEventType m_Type;
        private uint m_Modifiers;
        private int m_WindowsKeyCode;
        private int m_NativeKeyCode;
        private bool m_IsSystemKey;
        private short m_Character;
        private short m_UnmodifiedCharacter;
        private int m_FocusOnEditableField;

        public CfxKeyEvent() : base(CfxApi.cfx_key_event_ctor, CfxApi.cfx_key_event_dtor) {}
        internal CfxKeyEvent(IntPtr nativePtr) : base(nativePtr, CfxApi.cfx_key_event_ctor, CfxApi.cfx_key_event_dtor) {}
        internal CfxKeyEvent(IntPtr nativePtr, bool owned) : base(nativePtr, CfxApi.cfx_key_event_ctor, CfxApi.cfx_key_event_dtor, owned) {}

        /// <summary>
        /// The type of keyboard event.
        /// </summary>
        public CfxKeyEventType Type {
            get {
                return m_Type;
            }
            set {
                m_Type = value;
            }
        }

        /// <summary>
        /// Bit flags describing any pressed modifier keys. See
        /// cef_event_flags_t for values.
        /// </summary>
        public uint Modifiers {
            get {
                return m_Modifiers;
            }
            set {
                m_Modifiers = value;
            }
        }

        /// <summary>
        /// The Windows key code for the key event. This value is used by the DOM
        /// specification. Sometimes it comes directly from the event (i.e. on
        /// Windows) and sometimes it's determined using a mapping function. See
        /// WebCore/platform/chromium/KeyboardCodes.h for the list of values.
        /// </summary>
        public int WindowsKeyCode {
            get {
                return m_WindowsKeyCode;
            }
            set {
                m_WindowsKeyCode = value;
            }
        }

        /// <summary>
        /// The actual key code genenerated by the platform.
        /// </summary>
        public int NativeKeyCode {
            get {
                return m_NativeKeyCode;
            }
            set {
                m_NativeKeyCode = value;
            }
        }

        /// <summary>
        /// Indicates whether the event is considered a "system key" event (see
        /// http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
        /// This value will always be false on non-Windows platforms.
        /// </summary>
        public bool IsSystemKey {
            get {
                return m_IsSystemKey;
            }
            set {
                m_IsSystemKey = value;
            }
        }

        /// <summary>
        /// The character generated by the keystroke.
        /// </summary>
        public short Character {
            get {
                return m_Character;
            }
            set {
                m_Character = value;
            }
        }

        /// <summary>
        /// Same as |character| but unmodified by any concurrently-held modifiers
        /// (except shift). This is useful for working out shortcut keys.
        /// </summary>
        public short UnmodifiedCharacter {
            get {
                return m_UnmodifiedCharacter;
            }
            set {
                m_UnmodifiedCharacter = value;
            }
        }

        /// <summary>
        /// True if the focus is currently on an editable field on the page. This is
        /// useful for determining if standard key events should be intercepted.
        /// </summary>
        public int FocusOnEditableField {
            get {
                return m_FocusOnEditableField;
            }
            set {
                m_FocusOnEditableField = value;
            }
        }

        protected override void CopyToNative() {
            CfxApi.cfx_key_event_copy_to_native(nativePtrUnchecked, m_Type, m_Modifiers, m_WindowsKeyCode, m_NativeKeyCode, m_IsSystemKey ? 1 : 0, m_Character, m_UnmodifiedCharacter, m_FocusOnEditableField);
        }

        protected override void CopyToManaged(IntPtr nativePtr) {
            int is_system_key = default(int);
            CfxApi.cfx_key_event_copy_to_managed(nativePtr, out m_Type, out m_Modifiers, out m_WindowsKeyCode, out m_NativeKeyCode, out is_system_key, out m_Character, out m_UnmodifiedCharacter, out m_FocusOnEditableField);
            m_IsSystemKey = 0 != is_system_key;
        }
    }
}
